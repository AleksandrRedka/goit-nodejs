let uuid,fs,path,throws;_033‍.x([["default",()=>_033‍.o]]);_033‍.w("uuid",[["v4",["uuid"],function(v){uuid=v}]]);_033‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_033‍.w("path",[["default",["path"],function(v){path=v}]]);_033‍.w("assert",[["throws",["throws"],function(v){throws=v}]]);




const fsPromises = fs.promises
const contactsPath = path.join(__dirname, '../', 'db/', 'contacts.json')

class Contact {
  getContacts = async () => {
    try {
      const contacts = await listContacts()
      return contacts
    } catch (err) {
      return null
    }
  }

  getById = async contactId => {
    try {
      const contacts = await listContacts()
      const findedContact =
        contacts.find(contact => contact.id == contactId) || null
      return findedContact
    } catch (err) {
      return null
    }
  }

  addContact = async contact => {
    try {
      const contacts = await listContacts()
      const newContact = {
        id: uuid(),
        name: contact.name,
        email: contact.email,
        phone: contact.email
      }
      contacts.push(newContact)

      fsPromises.writeFile(contactsPath, JSON.stringify(contacts))
      return newContact
    } catch (err) {
      return null
    }
  }
  removeContact = async contactId => {
    try {
      const contacts = await listContacts()
      const newListContact = contacts.filter(
        contact => contact.id !== contactId
      )
      fsPromises.writeFile(contactsPath, JSON.stringify(newListContact))
      return true
    } catch (err) {
      return null
    }
  }

  updateContact = async contact => {
    try {
      const contacts = await listContacts()
      const contactIndex = contacts.findIndex(c => c.id === contact.id)
      _033‍.g.console.log('Contact index: ', contactIndex)
      if (contactIndex > -1) {
        contacts.splice(indexOfUser, 1)
        contacts.push(contact)
        fsPromises.writeFile(contactsPath, JSON.stringify(contacts))
        return contact
      }
      throw new Error()
    } catch (err) {
      return null
    }
  }
}

const listContacts = async () => {
  const result = await fsPromises.readFile(contactsPath, 'utf-8')
  const contactsList = JSON.parse(result)
  return contactsList
}

_033‍.d(new Contact());
